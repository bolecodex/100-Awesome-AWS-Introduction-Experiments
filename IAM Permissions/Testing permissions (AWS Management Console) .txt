In this demo, we will sign in to the AWS Management Console as a user (contractor) who is granted access only to AWS CloudShell. We will attempt to create an S3 bucket using AWS CLI commands through an AWS CloudShell session, which will fail. To gain access to the Amazon S3 service and successfully create an S3 bucket, we will assume a role (Contractors3access), which allows for S3 bucket creation. 

This demo illustrates the use of roles within the same organization. 

Assumptions
The following assumptions are considered as we work through the demo:
Users
Contractor
Attached policy = none

Group
Contractor
Attached policy = ContractorAccess
Assign the IAM User Contractor to Group Contractor

Role
S3access
Attached policy = ContractorS3access

Policies 
ContractorAccess
{
     "Version": "2012-10-17",
     "Statement": [
{
     "Effect": "Allow",
     "Action": "cloudshell:*",
     "Resource": "*"
},
{
     "Effect": "Allow",
     "Action": "sts:AssumeRole",
     "Resource": "arn:aws:iam::112233445566:role/S3access"
}
     ]
}

ContractorS3access
{
     "Version": "2012-10-17",
     "Statement": [
          {
               "Effect": "Allow",
               "Action": "s3:*",
               "Resource": "*" 
           }
      ]
}

Demo start

Sign in to the AWS Management Console with the user “Contractor” and search for CloudShell. 

Try to create an S3 bucket.

aws s3 mb s3://weibo-demo-test-bucket

Who am I logged in as?

aws sts get-caller-identity

Our attempt will fail to create the bucket. 

Let’s assume the assigned role ContractorAccess by first retrieving the temporary access information for the role.

aws sts assume-role --role-arn "arn:aws:iam::071908484098:role/S3access" --role-session-name DevOnAWS

The response includes access information required to assume the ContractorAccess: AccessKeyId, SecretAccessKey, and SessionToken

To assume the role, run the following three commands with the supplied AccessKeyId, SecretAccessKey, and SessionToken attached. 

export AWS_ACCESS_KEY_ID=AKIARBPQUMQBJW75F356
export AWS_SECRET_ACCESS_KEY=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
export AWS_SESSION_TOKEN=SessionToken

Let’s determine whether we have assumed the role.

aws sts get-caller-identity

Try to create an S3 bucket again as the assumed role.

aws s3 mb s3://DevonAWStest_bucket

Success!

This example shows how you can manage access to your application by using roles. 


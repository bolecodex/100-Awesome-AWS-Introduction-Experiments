AWSTemplateFormatVersion: 2010-09-09

Description: 'A lab that shows how to create a DynamoDB table and manage items in it'

Parameters:
  AmazonLinuxAMIID:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"              
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2      
  
  SampleAppUrl:
    Type: String
    Default: https://aws-tc-largeobjects.s3-us-west-2.amazonaws.com/ILT-TF-100-TECESS-5/app/app.zip

  SamplePhotosUrl:
    Type: String
    Default: https://aws-tc-largeobjects.s3-us-west-2.amazonaws.com/ILT-TF-100-TECESS-5/app/sample-photos.zip

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsHostnames: true
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: Lab VPC

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    DependsOn: AttachGateway
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true      
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: Public Subnet 1  

  PublicRouteTable:
    DependsOn: PublicSubnet1
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    DependsOn: PublicRoute
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  ImagesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ImagesBucket
      PolicyDocument:
        Statement:
          - Action:
              - 's3:*'
            Effect: Allow
            Resource: 
              - !Join
                - '/'
                - - !GetAtt ImagesBucket.Arn                
              - !Join
                - '/'
                - - !GetAtt ImagesBucket.Arn
                  - '*'
            Principal: 
                AWS: !GetAtt EC2WebInstanceRole.Arn

  ImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      CorsConfiguration:
        CorsRules:           
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - PUT
            AllowedOrigins:
              - "*"         

  EC2WebInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: EmployeeDirectoryAppRole
      Path: "/"
      Roles:
      - Ref: EC2WebInstanceRole   

  EC2WebInstanceRole:    
    Type: AWS::IAM::Role
    Properties:
      RoleName: EmployeeDirectoryAppRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: "Allow"
            Principal:
              Service: ["ec2.amazonaws.com"]
            Action: ["sts:AssumeRole"]        
      Policies:
        - PolicyName: DirectoryWebApplicationSSHPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2-instance-connect:SendSSHPublicKey
                Resource:
                  - arn:aws:ec2:*:*:instance/*
                Condition:
                  StringEquals:
                    ec2:osuser: ec2-user

        - PolicyName: DirectoryWebApplicationS3Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement: 
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:DeleteObject"
                  - "s3:GetObject"
                Resource: 
                  - !Join
                    - '/'
                    - - !GetAtt ImagesBucket.Arn                
                  - !Join
                    - '/'
                    - - !GetAtt ImagesBucket.Arn
                      - '*'
        - PolicyName: DirectoryWebApplicationDynamoDBPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement: 
              - Effect: Allow
                Action:                  
                  - dynamodb:ListTables
                Resource:
                  - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*
              - Effect: Allow
                Action: 
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:UpdateItem
                  - dynamodb:Scan
                Resource: 
                  - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Employees
              
  WebInstance:
    DependsOn:
      - ImagesBucket
      - PublicSubnet1RouteTableAssociation
    Type: 'AWS::EC2::Instance'
    Properties:
      IamInstanceProfile: !Ref EC2WebInstanceProfile
      ImageId: !Ref AmazonLinuxAMIID      
      InstanceType: t3.micro
      NetworkInterfaces:
        - DeviceIndex: '0'
          AssociatePublicIpAddress: true
          SubnetId: !Ref PublicSubnet1
          GroupSet:
            - !Ref WebSecurityGroup
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: Web Application
      UserData: !Base64 
        Fn::Sub: |
            #!/bin/bash -ex
            # Update yum
            yum -y update
            # Add node's source repo
            curl -sL https://rpm.nodesource.com/setup_15.x | bash -
            #Install nodejs
            yum -y install nodejs
            # Create a dedicated directory for the application
            mkdir -p /var/app
            # Get the app from s3
            wget ${SampleAppUrl}
            # Unzip it into a your desired folder
            unzip app.zip -d /var/app/
            cd /var/app/
            # Configure S3 bucket details
            export PHOTOS_BUCKET=${ImagesBucket}
            # Configure default AWS Region
            export DEFAULT_AWS_REGION=${AWS::Region}
            # Install dependencies
            npm install
            # Start your app
            npm start

  WebSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access
      GroupName: Web Security Group
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Web Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0  

  # This is not necessary in AWS Labs, as the access in that platform is role-based
  # - awsstudent doesn't exist in AWS Labs

  ReadOnlyGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: QLReadOnly
      ManagedPolicyArns: [ "arn:aws:iam::aws:policy/ReadOnlyAccess" ]

  GroupAssignment:
    Type: AWS::IAM::UserToGroupAddition
    DependsOn: ReadOnlyGroup
    Properties:
      GroupName: QLReadOnly
      Users:
        - awsstudent


Outputs:
  PublicWebApplicationURL: 
    Value:
      Fn::Join:
        - ''
        - - http://
          - Fn::GetAtt:
            - WebInstance
            - PublicDnsName
          
    Description: Employee directory application URL
  
  SamplePhotosUrl: 
    Value: !Ref SamplePhotosUrl
    Description: Zip File containing sample images